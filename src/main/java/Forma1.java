import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.Vector;


public class Forma1 extends JFrame {
    private JTable table1;
    private JButton delButton;
    private JButton addButton;
    private JPanel jok;
    private DatabaseConnection databaseConnection = new DatabaseConnection();

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jok = new JPanel();
        jok.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        delButton = new JButton();
        delButton.setText("Delete");
        jok.add(delButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        table1 = new JTable();
        jok.add(table1, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        jok.add(addButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jok;
    }


    private Forma1() {
        setTitle("DataBase form");
        setContentPane(jok);
        setVisible(true);
        setSize(800, 600);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        delButton.addActionListener(e -> {
            String id = JOptionPane.showInputDialog(
                    Forma1.this,
                    "Введите id записи, которую хотите удалить");
            if (!(id.equals(null)) && !(id.equals(""))) {
                databaseConnection.delete(id);
                this.dispose();
                new Forma1();
            }
        });
        addButton.addActionListener(e -> {
            JTable table = new JTable(new Vector<>(), setColumnNames("Uchet", false));
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.addRow(new Vector<>());
            JScrollPane jScrollPane = new JScrollPane(table);
            JOptionPane.showMessageDialog(Forma1.this, jScrollPane);
            JTable modified = (JTable) jScrollPane.getViewport().getView();
            add(modified);
        });
        table1.getModel().addTableModelListener(evt -> {
            int row = table1.getSelectedRow();
            int count = table1.getColumnCount();
            String id = table1.getModel().getValueAt(row, 0).toString();
            for (int i = 0; i < count; i++)
                databaseConnection.edit(id, table1.getColumnName(i).toLowerCase(), table1.getModel().getValueAt(row, i).toString().trim());
            this.dispose();
            new Forma1();
        });
    }


    private void add(JTable modified) {
        ArrayList<String> addRow = new ArrayList<>();
        int row = 0;
        int count = modified.getColumnCount();
        System.out.println(modified.getModel().getValueAt(row, 4));
        for (int i = 0; i < count; i++) {
            if (modified.getColumnName(i).toLowerCase().equals(("product")) || (modified.getColumnName(i).toLowerCase().equals("date_of_delivery")) || (modified.getColumnName(i).toLowerCase().equals("date_of_sale")))
                addRow.add("\'" + modified.getModel().getValueAt(row, i).toString().trim() + "\'");
            else
                addRow.add(modified.getModel().getValueAt(row, i).toString().trim());
        }
        String addArgument = "";
        for(int i = 0; i < addRow.size(); i++) {
            String s = addRow.get(i);
            if(i != addRow.size() - 1)
                addArgument = addArgument.concat(s).concat(", ");
            else
                addArgument = addArgument.concat(s);
        }
        databaseConnection.add(addArgument);
        this.dispose();
        new Forma1();
    }

    private JTable loadTableData(String tableName) {
        DefaultTableModel defaultTableModel;
        if (tableName.equals("Uchet")) {
            Vector<String> columnNames = setColumnNames(tableName, true);
            Vector<ArrayList<String>> rows = new Vector<>();
            rows.addElement(databaseConnection.getIntegerData("product_code"));
            rows.addElement(databaseConnection.getProducts());
            rows.addElement(databaseConnection.getIntegerData("price"));
            rows.addElement(databaseConnection.getDatesOfDelivery());
            rows.addElement(databaseConnection.getDatesOfSale());
            rows.addElement(databaseConnection.getIntegerData("amount"));
            JTable tab = new JTable(new Vector<>(), columnNames);
            defaultTableModel = (DefaultTableModel) tab.getModel();
            for (int i = 0; i < rows.get(0).size(); i++) {
                Vector<String> row = new Vector<>();
                for (int j = 0; j < rows.size(); j++) {
                    row.add(rows.get(j).get(i));
                }
                defaultTableModel.addRow(row);
            }
            tab.setFillsViewportHeight(true);
            return tab;
        } else
            return null;
    }


    private Vector<String> setColumnNames(String table, boolean addIdCol) {
        if (table.equals("Uchet")) {
            Vector<String> columnNames = new Vector<>();
            if (addIdCol)
                columnNames.add("Product_code");
            columnNames.add("Product");
            columnNames.add("Price");
            columnNames.add("Date_of_delivery");
            columnNames.add("Date_of_sale");
            columnNames.add("Amount");
            return columnNames;
        }
        return null;
    }

    public static void main(String[] args) {
        new Forma1();
    }

    private void createUIComponents() {
        table1 = loadTableData("Uchet");
    }
}